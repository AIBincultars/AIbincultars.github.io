<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gradio部署模型</title>
      <link href="/2024/05/14/gradio-mo-xing-bu-shu/"/>
      <url>/2024/05/14/gradio-mo-xing-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>gradio目前只支持tensorflow 1.x版本,而tensorflow2 移除了Session的使用,在gradio源码中注释掉,gradio就可以应用到tensorflow2上了。</p><p>一.gradio的基本用法<br>1.gradio.Interface()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gradio<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfmodel <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>mobilenet_v2<span class="token punctuation">.</span>MobileNetV2<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">'imagenet'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> gradio<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token string">'imageupload'</span><span class="token punctuation">,</span>outputs<span class="token operator">=</span><span class="token string">'label'</span><span class="token punctuation">,</span>model_type<span class="token operator">=</span><span class="token string">'keras'</span><span class="token punctuation">,</span>model<span class="token operator">=</span>model<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''创建界面对象输入方式 inputs 使用图片上传的方式输出方式 outputs 使用模型所对应的索引号模型类型 model_type 使用 keras模型传入上面定义的 MobileNet 模型'''</span>io<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#该指令为启动指令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在终端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python quick_start<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二.使用imagenet</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gradio<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment"># 导入 ImageNet 预训练的 MobileNetV2</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>mobilenet_v2<span class="token punctuation">.</span>MobileNetV2<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">'imagenet'</span><span class="token punctuation">)</span><span class="token comment"># 定义输出为 gradio.outputs 对象，同时传入 imagenet 参数</span>outputs <span class="token operator">=</span> gradio<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>label_names<span class="token operator">=</span><span class="token string">'imagenet1000'</span><span class="token punctuation">)</span><span class="token comment"># 创建界面对象</span>io <span class="token operator">=</span> gradio<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token string">"imageupload"</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span>outputs<span class="token punctuation">,</span> model_type<span class="token operator">=</span><span class="token string">"keras"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span><span class="token comment"># 启动服务</span>io<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.使用手写输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gradio<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment"># 导入手写体识别模型</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">'mnist_model.h5'</span><span class="token punctuation">)</span><span class="token comment"># 初始化一个手写输入的对象，flatten=True 表示将图片一维化</span>inp <span class="token operator">=</span> gradio<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>Sketchpad<span class="token punctuation">(</span>flatten<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建界面对象</span>io <span class="token operator">=</span> gradio<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>inputs<span class="token operator">=</span>inp<span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token string">'label'</span><span class="token punctuation">,</span> model_type<span class="token operator">=</span><span class="token string">"keras"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span><span class="token comment"># 启动服务</span>io<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四.使用文本输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gradio<span class="token comment"># 定义一个英文的大写转换函数</span><span class="token keyword">def</span> <span class="token function">upper</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建界面对象时设置输入为文本输入框，模型类别为 Python 函数</span>io <span class="token operator">=</span> gradio<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token string">"textbox"</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token string">"textbox"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>upper<span class="token punctuation">,</span> model_type<span class="token operator">=</span><span class="token string">'pyfunc'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模型部署应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tflite部署模型</title>
      <link href="/2024/05/14/tflite-bu-shu-mo-xing/"/>
      <url>/2024/05/14/tflite-bu-shu-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>tensorflow lite是google推出的一个轻量级推理库,主要用于移动端。<br>知识点:<br>·转换Keras模型为tensorflow lite格式<br>·tensorflow lite权重量化<br>·tensorflow lite整数量化<br>·tensorflow liteFloat16量化<br>一.TensorFlow Lite模型转换<br>TensorFlow2中,用于将tensorflow模型转为tensorflow lite格式的API是<code>tf.lite.TFLiteConverter</code>,这个API包含了三种方法:</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">from_keras_model,用于转换Keras模型from_saved_model,用于转换SavedModel模型from_concrete_functions,用于转换Tensorflow的Function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import tensorflow as tf#导入tensorflow库model &#x3D; tf.keras.applications.mobilenet_v2.MobileNetV2(weights&#x3D;&#39;imagenet&#39;)#导入预训练模型，设置权重为&#39;imagenet&#39;converter &#x3D; tf.lite.TFLiteConverter.from_keras_model(model)#加载模型tflite_model &#x3D; converter.convert()#转换模型格式open(&#39;converted_model.tflite&#39;,&#39;wb&#39;).writer(tflite_model)#保存为converted_model.tflite文件格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本用法(用图片数据来表示):</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">#先准备数据from skimage import dataimport cv2import numpy as npfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input# 读取图片并预处理image &#x3D; data.chelsea()image &#x3D; cv2.resize(image, (224, 224))image &#x3D; np.expand_dims(image, 0)x &#x3D; preprocess_input(image)x.shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>tf.lite.Interpreter</code>方法来读取模型文件,并进行预测:</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">from tensorflow.keras.applications.mobilenet_v2 import decode_predictions#先导入库def pred_fn(filename):#构建预测函数    interpreter &#x3D; tf.lite.Interpreter(model_path&#x3D;filename)    #从文件中加载tflite模型    interpreter.allocate_tensors()    #分配张量    input_details &#x3D; interpreter.get_input_details()    #获得输入向量    output_details &#x3D; interpreter.get_output_details()    #获得输出向量    interpreter.set_tensor(input_details[0][&#39;index&#39;],x)    #张量填充    interpreter.invoke()    #运行推理    results &#x3D; interpreter.get_tensor(output_details[0][&#39;index&#39;])    #获取了张量值    pred &#x3D; decode_prediction(results)    #获得了对应标签    return predpred_fn(&#39;converd_model.tflite&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的工作主要分为了初始化和推理,以下是对tensorflow lite的优化和加速</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3"># 直接从 tf.lite 中获取 Interpreterinterpreter &#x3D; tf.lite.Interpreter(model_path&#x3D;&#39;converted_model.tflite&#39;)interpreter.allocate_tensors()# 获取输入和输出张量input_details &#x3D; interpreter.get_input_details()output_details &#x3D; interpreter.get_output_details()# 张量填充interpreter.set_tensor(input_details[0][&#39;index&#39;], x)# 运行推理interpreter.invoke()# 获取张量值results &#x3D; interpreter.get_tensor(output_details[0][&#39;index&#39;])# 获取对应标签pred &#x3D; decode_predictions(results)pred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模型量化:<br>将<code>数据格式</code>降低或者增加，以适配部署的平台。<br>其中有<code>权重量化</code>,其适用于CPU场景,缩小4倍，加速2-3倍<br><code>整数量化</code>,其适用于CPU,EdgeTPU场景,缩小4倍,加速3倍以上<br><code>Float16量化</code>,适用于GPU或者CPU,缩小2倍<br>1.权重量化<br>将权重转换为8位精度</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">weight_converter &#x3D; tf.lite.TFLiteConverter.from_keras_model(model)#使用TFLiteConverter加载模型weight_converter.optimizations &#x3D; [tf.lite.Optimize.OPTIMIZE_FOR_SIZE]#使用optimizations对输出大小进行优化tflite_weight_model &#x3D; weight_converter.convert()open(&#39;weight_converted_model.tflite&#39;,&#39;wb&#39;).write(tflite_weight_model)#转换模型并且保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换完成后就可以使用上面的图片进行测试了</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">pred_fn(&#39;weight_converted_model.tflite&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>整数量化:<br>将模型的<code>权重和激活</code>转换为8位整数<br>需要一个具有<code>代表性的数据集</code></p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3"># 生成代表性的数据集，在实际中可能需要部分或者全部的训练数据dataset &#x3D; tf.data.Dataset.from_tensor_slices((x)).batch(1)def representative_dataset_gen():  for input_value in dataset.take(1):    yield [input_value]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>量化转换模型</code></p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">#读取模型integer_converter &#x3D; tf.lite.TFLiteConverter.from_keras_model(model)#使用optimizations对输出大小优化inter_converter.optimizations &#x3D; [tf.lite.Optimize.DEFAULT]#指定代表性的数据集integer_converter.representative_dataset &#x3D; representative_dataset_gen#转换并保存tflite_integer_model &#x3D; integer_converter.convert()open(&#39;integer_converted_model.tflite&#39;,&#39;wb&#39;).write(tflite_integer_model)#预测pred_fn(&#39;integer_converted_model.tflite&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Float16量化:<br>将<code>权重值</code>转换为<code>16bit浮点值</code>,这样可将模型尺寸减小2倍</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">#使用tf.lite.TFLiteConverter加载模型  float16_converter &#x3D; tf.lite.TFLiteConverter.from_keras_model(model)#使用optimizations对输出大小优化,同时指定float16为目标设备上的支持类型float16_converter.optimizations &#x3D; [tf.lite.Optimiza.DEFAULT]float16_converter.target_spec.supported_types &#x3D; [tf.float16]#转换并保存tflite_float16_model &#x3D; float16_converter.convert()open(&#39;float16_converted_model.tflite&#39;,&#39;wb&#39;).write(tflite_float_model)#预测pred_fn(&#39;tflite_float16_model&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模型部署应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ONNX部署模型</title>
      <link href="/2024/05/12/onnx-bu-shu-mo-xing/"/>
      <url>/2024/05/12/onnx-bu-shu-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>对ONNX的通俗理解是 模型部署前统一的中间格式,不同的框架如<code>pytorch</code>,<code>tensorflow</code>等框架训练后保存的模型，<br>统一转为ONNX的格式，这样方便部署到各种各样的平台上,如PC,单片机，手机等等。</p><p>一.模型应用的流程</p><p>  保存训练好的模型-&gt;转换为ONNX格式-&gt;用ONNX RUNTIME进行推理分析并且部署</p><p>二.ONNX<br>1.torch.onnx.export()<br>pytorch中自带了onnx,下面用代码展示如何将pytorch模型转换为onnx格式的模型<br>先导入库</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import torchimport torch.onnxfrom torch import nnimport numpy as npimport cv2import os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">x &#x3D; torch.randn(1,3,256,256) #随机生成格式和照片一样的张量with torch.no_grad():#不更新梯度    torch.onnx.export(model,                      x,                      &#39;cnn.onnx&#39;,                      opset_version&#x3D;11,                      input_names&#x3D;[&#39;input&#39;],                      output_names&#x3D;[&#39;output&#39;] )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中torch.onnx.export是pytorch自带的格式转换函数<br>第一个参数model,需要传入<code>已经实例化好的原模型</code><br>第二个参数x,需要传入一个和模型输入数据<code>格式相同</code>的一个随机数据,这样模型就会知道数据的格式(形式)是怎样的了。<br>第三个参数表示保存模型的名字为’xxx.onnx’<br>opset_version表示ONNX算子集的版本,此处设为11<br>剩下两个参数为输入输出的名字，要自己设置好</p><p>2.onnx.checker.check_model()<br>onnx_load<br>若上述代码成果运行,则会生成一个onnx模型,目录下会新增一个’cnn.onnx’的模型文件,我们需要检测一下模型文件是否正确。</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import onnxonnx_model&#x3D;onnx_load(&#39;cnn.onnx&#39;)#用于加载模型文件try:    onnx.checker.check_model(onnx_model)#用于检测模型文件是否正确except Exception:#捕获异常值Exception    print(&#39;Model incorrect&#39;)else:    print(&#39;Model correct&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.onnxruntime<br>我们将pytorch编写的模型转换成onnx模型后,检验正确性通过后，利用onnxruntime运行模型</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import onnxruntimeort_session &#x3D; onnxruntime.InferenceSession(&#39;cnn.onnx&#39;)#获取了一个ONNX Runtime推理器ort_inputs &#x3D; &#123;&#39;input&#39;: input_img&#125; #前面在torch.onnx.export命名了输入名为&#39;input&#39;ort_outputs &#x3D; ort_session.run([&#39;output&#39;],ort_inputs)[0]#run方法用于模型推理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意对输入输出数据的处理,在对格式转换阶段,要确认输入的x的格式,要确保后续input的格式与x相同例如x.shape&#x3D;[256,1],则input的输入也要为[256,1],可以用np.pad()来完成,主要是元素个数要相同。要紧紧关注题提供的代码。<br>np.pad(input,(pad_width(axis&#x3D;0),pad_width(axis&#x3D;1))),其中axis&#x3D;0是行填充,aixs&#x3D;1是列填充</p>]]></content>
      
      
      <categories>
          
          <category> 模型应用部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用TFLite Model Maker完成看图识花APP</title>
      <link href="/2024/05/12/tensorflow-lite/"/>
      <url>/2024/05/12/tensorflow-lite/</url>
      
        <content type="html"><![CDATA[<p>tensorflow-lite在小型设备上进行识别</p><p>TFLite Micro:是在MCU和移动统一的框架</p><p>一.TFLite Model Maker<br>    TFLite中的一个迁移学习的python库,无需机器学习背景就可以将最前沿模型应用到自己的数据集上。<br>Model Maker可以应用于<code>图像分类</code>,<code>文字分类</code>,<code>文本问答</code></p>]]></content>
      
      
      <categories>
          
          <category> tensorflow-lite </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sklearn中的机器学习</title>
      <link href="/2024/05/10/sklearn-zhong-de-ji-qi-xue-xi/"/>
      <url>/2024/05/10/sklearn-zhong-de-ji-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>一.机器学习算法分类<br>1.<code>监督学习</code>：有X_data和X_label,可以通过经X_data和X_label训练后的模型，放入y_test来预测y_label,常见的算法有:<code>线性回归</code>，<code>逻辑回归</code>，支持向量机，<code>随机森林</code>，<code>朴素贝叶斯</code>等等<br>2.<code>无监督学习</code>:只有data,没有人为的标注,通过算法本身发现数据的规律和结构,常见的无监督学习算法有:<code>k-means</code>,<code>主成成分分析(降维)</code><br>二.评估指标<br>常见的有准确率(accuracy),精确率(precision),召回率(recall),f1分数(F1 Score)<br>其中precision,recall用来评估二分类模型<br>f1综合了precision,recall的评估方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>f1_score<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三.监督学习<br>1.<code>线性回归</code>–预测趋势<br>sklearn.linear_model.LinearRegression()<br>step1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment">#数据处理库，也算是一种简单验证法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>f1_score<span class="token comment">#训练评估库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>step2</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#对模型实例化</span>model<span class="token operator">=</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>step3</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#对模型进行训练</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span>Flase<span class="token punctuation">)</span><span class="token comment">#shuffle表示是否打乱</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>step4</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#进行预测</span>y_pred<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>step4</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#进行模型测评</span>accuracy<span class="token operator">=</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span>precision<span class="token operator">=</span>precision_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span>recall<span class="token operator">=</span>recall_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span>f1<span class="token operator">=</span>f1_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span class="token comment">#其中precision,recall用来评估二分类模型</span><span class="token comment">#f1综合了precision,recall的评估方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<code>逻辑回归</code>–0&#x2F;1分类<br>sklearn.linear_model.LogisticRegression()<br>导入相应库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>f1_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token operator">=</span>LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_pred<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>accuracy<span class="token operator">=</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.<code>决策树</code>–有大量数据的时候会有<code>过拟合</code><br>sklearn.tree.DecisionTreeClassifier()–<code>决策树中的分类树</code><br>sklearn.tree.DecisionTreeRegressor()–<code>决策树中的分类树</code><br>1)分类树</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#分类树</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selcetion <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>f1_score<span class="token comment">#对模型进行实例化</span>clf<span class="token operator">=</span>DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#分割数据</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>clf<span class="token operator">=</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token comment">#第一种评测方法</span>result<span class="token operator">=</span>clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token comment">#第二种得出y_pred自己评测</span>y_pred<span class="token operator">=</span>clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>accuracy<span class="token operator">=</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2)回归树</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#回归树</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span>precision_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span>f1_score<span class="token comment">#对模型实例化</span>clf<span class="token operator">=</span>DecisionTreeRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>clf<span class="token operator">=</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_pred<span class="token operator">=</span>clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment">#测试集在模型上的表现</span>score<span class="token operator">=</span>clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token comment">#自己评估</span>accuracy_score<span class="token operator">=</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span class="token comment">#若将回归树拟合的函数可视化，将不是平滑曲线，而是分段函数的形式。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DecisionTreeClassifier()相关参数<br>criterion&#x3D;’gini’,<br>splitter&#x3D;’best’,<br>max_depth&#x3D;None,<br>min_samples_split&#x3D;2,<br>min_samples_leaf&#x3D;1,<br>min_weight_fraction_leaf&#x3D;0.0,<br>max_features&#x3D;None,<br>random_state&#x3D;None,<br>max_leaf_nodes&#x3D;None,<br>min_impurity_decrease&#x3D;0.0,<br>min_impurity_split&#x3D;None,<br>class_weight&#x3D;None,<br>presort&#x3D;False<br><code>重要参数说明</code><br>criterion 决定不纯度(不确定性)计算方法,sklearn提供了两种方法<br>1)entropy,使用信息熵(Entropy)<br>2)gini,使用基尼系数<br>不纯度<code>越低</code>,其<code>拟合效果越好</code>。<br>random_state 种子参数，若为实数则保证模型稳定，每运行一次，所选取的特征不变<br><code>剪枝参数</code><br>不加以限制的情况下(参数都设定为默认情况),一棵决策树会生长到衡量不纯度指标最优的情况下,或者没有更多特征可用，这样往往会<code>过拟合</code>,即<code>在训练集上表现优秀,但在测试集的情况下表示很糟糕</code>。</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.<code>随机森林</code>–将多个决策树聚集在一起的<code>集成学习</code><br>sklearn.ensemble.RandomForestClassifier()–随机森林分类<br>sklearn.ensemble.RandomForestRegressor()–随机森林回归<br>1)分类森林</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重要参数<br>criterion 不纯度指标,有gini和entropy两种选择<br>max_depth 最大深度,超过最大深度的树枝都会被剪掉<br>min_samples_leaf<br>min_samples_split<br>max_features<br>min_impurity_decrease<br>n_estimator 基评估器数量，数值越大模型效果越好，但有一定的边界，计算时间也就越长。<br>2)回归森林<br>二.无监督学习<br>5.<code>K近邻</code><br>KNeighborsClassifier()<br>先导入库</p><pre class="line-numbers language-none"><code class="language-none">from sklearn.neighbors import KNeighborsClassifier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关键参数<br>n_neighbors&#x3D;</p><p>algorithm&#x3D;’auto’</p><p>6.<code>主成成分分析(降维算法)</code></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sklearn中的数据预处理</title>
      <link href="/2024/05/10/sklearn-zhong-de-yi-xie-shu-ju-chu-li/"/>
      <url>/2024/05/10/sklearn-zhong-de-yi-xie-shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<p>model_selection模块<br>一.train_test_split()<br>1.导入相关模块</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">from sklearn.model_selection import train_test_spilt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.用法</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">X_train, X_test, y_train, y_test &#x3D; train_test_split(   train_data,   train_target,   test_size,   random_state,   shuffle)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.参数<br>a.train_data: 传入你想分割的数据集<br>b.train_target: 传入你想分割的标签<br>注意:train_data要和train_target的<code>行</code>对应。<br>c.test_size:分割比例默认为0.25,即测试集占完整数据集的比例<br>通俗地讲，即表示测试集大小比例。<br>d.random_state: 默认值为None,随机数种子,设置成定值意味着对于同一数据集来讲，只有第一次数据分割是随机的，之后都和第一次分割一样。<br>e.shuffle: bool值,是否在分割前打乱数据集</p><p>preprocessing模块<br>二.sclae()标准化<br>1.导入库</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">from sklearn.preprocessing import scale<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.用法<br>使用原因:某些特征的方差过大，会主导<code>目标函数</code>从而使参数估计其无法正确的去学习其他特征<br>使用过程:去均值的中心化(均值变为0),方差的规模化(方差变为1)</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3"># x 是一个numpy数组x_scale&#x3D;scale(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三.</p>]]></content>
      
      
      <categories>
          
          <category> sklearn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自编码器</title>
      <link href="/2024/05/07/zi-bian-ma-qi/"/>
      <url>/2024/05/07/zi-bian-ma-qi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rnn和lstm神经网络的应用</title>
      <link href="/2024/05/06/rnn-he-lstm-shen-jing-wang-luo-de-ying-yong/"/>
      <url>/2024/05/06/rnn-he-lstm-shen-jing-wang-luo-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>一.前言<br>    1.RNN网络，全称Recurrent Neural Network,中文为循环神经网络<br>    ,主要是应用在一系列序列化数据的建模问题中,通俗地讲数据有顺序要求<br>    ，比如在天气预测中，每天的天气变化,以及在文本处理中，句子中的词语的顺序。<br>    RNN网络能更好处理类似问题，但他存在一个问题，梯度消失以及梯度爆炸。<br>    2.LSTM网络,全称Long Short Term Memory,中文为长短期记忆递归网络<br>    ,是RNN网络的一种<br>    ,它解决了原始RNN网络中梯度爆炸和梯度消失的问题，<br>    能更好的处理文本数据等等问题。</p><p>二.代码应用(pytorch)<br>    1.RNN<br>        1)torch.nn.RNN( input_size,<br>                        hidden_size,<br>                        num_layers&#x3D;1,<br>                        nonlinearity&#x3D;tanh,<br>                        bias&#x3D;True,<br>                        batch_first&#x3D;False,<br>                        dropout&#x3D;0,<br>                        bidirectional&#x3D;False)<br>        是torch.nn中的RNN层,可以用于神经网络模型的搭建,下面介绍各个参数的含义<br>        ·input_size: 输入特征的维度，通俗的讲就是该层需要知道一个样本中有几个特征，特征的数量就是input_size,在矩阵中的表现就是矩阵的列<br>        ·hidden_size:隐藏层神经元个数，也叫输出的纬度<br>        ·num_layers:RNN网络的层数<br>        ·nonlinearity:激活函数，一般为tanh<br>        ·bias:是否使用偏置<br>        ·batch_first:输入数据的形式，默认是False就是这样形式，(seq(num_step), batch, input_dim)，也就是将序列长度放在第一位,batch放在第二位<br>        ·dropout:是否应用dropout, 默认不使用，如若使用将其设置成一个0-1的数字即可,随机丢弃数据，防止过拟合<br>        ·birdirectional:是否使用双向的 rnn，默认是 False<br>        2)数据输入输出的形状<br>            a. input_shape&#x3D;[时间步数,批量大小,特征维度]&#x3D; [num_steps(seq_length), batch_size, input_dim]<br>            b. 在forward函数计算后,nn.RNN()会返回两个值：输出和隐藏状态h,通常我们需要得到的是输出,对于隐藏状态h可以用符号_接收。nn.LSTM()也会返回两个值：输出和隐藏状态(t,c),隐藏状态是一个元组,形状为(层数,批量大小)<br>            c.num_steps:时间步数，相当于需要经过几次处理，处理的次数就是num_steps<br>        3)示例代码<br>             <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import torch.nn as nnimport torch #需要导入该库    rnn_layer&#x3D;nn.RNN(input_size&#x3D;vocab_size,hidden_size&#x3D;num_hiddens)    #定义RNN模型层,其中我们假设vocab_size&#x3D;1027,hidden_size&#x3D;256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>             <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">num_steps&#x3D;35batch_size&#x3D;2state&#x3D;None #初始隐藏层状态可以不定义X&#x3D;torch.rand(num_steps,batch_size,vocab_size)#生成数据Y, _ &#x3D; rnn_layer(X,state)print(Y.shape,len(_),_.shape)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>            输出:<br>            <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">torch.Size([35, 2, 256])     1       torch.Size([1, 2, 256])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>    2.LSTM<br>        LSTM的隐藏层比RNN多一个c,这样可以防止遗忘以及梯度问题。<br>        1)torch.nn.LSTM( input_size,<br>                         hidden_size,<br>                         num_layers&#x3D;1,<br>                         nonlinearity&#x3D;tanh,<br>                         bias&#x3D;True,<br>                         batch_first&#x3D;False,<br>                         dropout&#x3D;0,<br>                         bidirectional&#x3D;False)<br>        是torch.nn中的LSTM层,可以用于神经网络模型的搭建,下面介绍各个参数的含义<br>        ·input_size: 输入特征的维度，通俗的讲就是该层需要知道一个样本中有几个特征，特征的数量就是input_size,在矩阵中的表现就是矩阵的列<br>        ·hidden_size:隐藏层神经元个数，也叫输出的纬度<br>        ·num_layers:LSTM网络的层数,默认为1<br>        ·nonlinearity:激活函数，一般为tanh<br>        ·bias:是否使用偏置,默认为True<br>        ·batch_first:输入数据的形式，默认是 False，就是这样形式，(seq(num_step), batch, input_dim)，也就是将序列长度放在第一位，batch 放在第二位<br>        ·dropout:是否应用dropout, 默认不使用，如若使用将其设置成一个0-1的数字即可,随机丢弃数据，防止过拟合<br>        ·birdirectional:是否使用双向的lstm，默认是 False<br>        2)数据的输入输出格式<br>            a.输入格式<br>        <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">input(seq_len, batch, input_size)参数有：seq_len：序列长度，在NLP中就是句子长度，一般都会用pad_sequence补齐长度batch：每次喂给网络的数据条数，在NLP中就是一次喂给网络多少个句子input_size：特征维度，和前面定义网络结构的input_size,一般就是特征数vocab_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>            b.输出格式<br>            output.shape&#x3D;[seq_len,batch,hidden_size*num_direction]<br>            若为单向循环网络,num_direction&#x3D;1<br>            若为双向循环网络,num_direction&#x3D;2<br>            <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">  output,(h,c)&#x3D;lstm(input)  #output最后一个状态的隐藏层的神经元输出  #h最后一个状态的隐藏层的状态值  #c最后一个状态的隐含层的遗忘门值  &#96;&#96;&#96;     3)示例代码      先导入库      &#96;&#96;&#96;python3      import torch.nn as nn      import torch      &#96;&#96;&#96;python3      x&#x3D;torch.rand(10,24,100)      #随机生成数据      lstm&#x3D;nn.LSTM(100,16,num_layers&#x3D;2)      output,(h,c) &#x3D; lstm(x)      print(output.size())      print(h.size())      print(c.size())       output:      torch.Size([24, 10, 16])      torch.Size([2, 10, 16])      torch.Size([2, 10, 16])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    3.embedding<br>            1)torch.nn.Embedding(num_embeddings,<br>                                 embedding_dim,<br>                                 padding_idx&#x3D;0<br>                                 )<br>                num_embeddings:就是词典中词的数量，词典由待处理的文本数据构成<br>                embedding_dim:输出的维度,将一个词分为几个维度表征，例如:我们可以用脸+眼睛作为两个维度表示一个人，也可以用脸+眼睛+鼻子作为三个维度表示一个人，此时能更精确的表示一个人。<br>                padding_idx:一般默认为0<br>            2)nn.Embedding是pytorch中的模块，主要作用是将整数序列转换为密集向量表示,在NLP任务中可以将每个单词表示成一个向量。传入的数据格式要求是LongTensor<br>            整数序列是每个单词的索引,将索引传入nn.Embedding层后会生成一个张量，每一行代表一个词的向量<br>            embedding层中权重是可学习的，可以随着模型学的而进行变化。<br>            3)nn.Embedding词向量转化<br>            在PyTorch中，nn.Embedding用来实现词与词向量的映射。nn.Embedding具有一个权重（.weight），形状是(num_words, embedding_dim)。例如一共有100个词，每个词用16维向量表征，对应的权重就是一个100×16的矩阵。<br>            Embedding的输入形状N×W，N是batch size，W是序列的长度，输出的形状是N×W×embedding_dim。<br>            Embedding输入必须是LongTensor，FloatTensor需通过tensor.long()方法转成LongTensor。<br>            Embedding的权重是可以训练的，既可以采用随机初始化，也可以采用预训练好的词向量初始化。<br>            4)embedding如何处理文本<br>            在NLP任务中,首先要对文本进行处理，将文本进行编码转换，形成向量表达,使用embedding处理文本的流程如下:<br>            a. 分词<br>                输入一段文本,中文分词(jieba分词),英文分词(.split(),按照空格提取词)<br>            b. 将分词转换成字典形式，英文以空格为词的分割，所以可以直接建立词典索引结构.类似于：word2id &#x3D; {‘i’ : 1, ‘like’ : 2, ‘you’ : 3, ‘want’ : 4, ‘an’ : 5, ‘apple’ : 6} 这样的形式。如果是中文的话，首先进行分词操作。<br>            c.以句子为list,为每个句子建立索引结构,list[[sentence1],[sentence2]],若以上面的词典索引结构为例子，则建立的list的是 [ [ 1 , 2 , 3 ] , [ 1 , 4 , 5 , 6 ] ] 。这样长短不一的句子<br>            d.在处理中要求张量的长度一致,故需要进行padding的操作,再利用 nn.Embedding 来进行词的初始化。padding后的可能是这样的结构<br>            [ [ 1 , 2 , 3, 0 ] , [ 1 , 4 , 5 , 6 ] ] 。其中0作为填充。（注意：由于在NMT任务中肯定存在着填充问题，所以在embedding时一定存在着第三个参数，让某些索引下的值为0，代表无实际意义的填充）<br>            d.代码示例<br>            <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">import torchfrom torch import nn# 创建最大词个数为10，每个词用维度为4表示embedding &#x3D; nn.Embedding(10, 4) # 将第一个句子填充0，与第二个句子长度对齐in_vector &#x3D; torch.LongTensor([[1, 2, 3, 4, 0, 0], [1, 2, 5, 6, 5, 7]])out_emb &#x3D; embedding(in_vector)print(in_vector.shape)print((out_emb.shape))print(out_emb)print(embedding.weight)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>             输出<br>            <pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">torch.Size([2, 6])torch.Size([2, 6, 4])tensor([[[-0.6642, -0.6263,  1.2333, -0.6055],        [ 0.9950, -0.2912,  1.0008,  0.1202],        [ 1.2501,  0.1923,  0.5791, -1.4586],        [-0.6935,  2.1906,  1.0595,  0.2089],        [ 0.7359, -0.1194, -0.2195,  0.9161],        [ 0.7359, -0.1194, -0.2195,  0.9161]],         [[-0.6642, -0.6263,  1.2333, -0.6055],        [ 0.9950, -0.2912,  1.0008,  0.1202],        [-0.3216,  1.2407,  0.2542,  0.8630],         [ 0.6886, -0.6119,  1.5270,  0.1228],        [-0.3216,  1.2407,  0.2542,  0.8630],        [ 0.0048,  1.8500,  1.4381,  0.3675]]], grad_fn&#x3D;&lt;EmbeddingBackward0&gt;)    Paramter containing:    tensor([[ 0.7359, -0.1194, -0.2195,  0.9161],            [-0.6642, -0.6263,  1.2333, -0.6055],            [ 0.9950, -0.2912,  1.0008,  0.1202],            [ 1.2501,  0.1923,  0.5791, -1.4586],            [-0.6935,  2.1906,  1.0595,  0.2089],            [-0.3216,  1.2407,  0.2542,  0.8630],            [ 0.6886, -0.6119,  1.5270,  0.1228],            [ 0.0048,  1.8500,  1.4381,  0.3675],            [ 0.3810, -0.7594, -0.1821,  0.5859],            [-1.4029,  1.2243,  0.0374, -1.0549]], requires_grad&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>            nn.Embedding在构建模型过程中，可以作为模型的一部分，进行共同训练</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习模型的应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch搭建神经网络</title>
      <link href="/2024/04/29/pytorch-da-jian-shen-jing-wang-luo/"/>
      <url>/2024/04/29/pytorch-da-jian-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 神经网络搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>评估指标(tensorflow和keras)</title>
      <link href="/2024/04/25/ping-gu-zhi-biao-tensorflow/"/>
      <url>/2024/04/25/ping-gu-zhi-biao-tensorflow/</url>
      
        <content type="html"><![CDATA[<p>Keras和tensorflow的评估指标很相似,评估功能都内置在函数库中。</p><p>评估功能呢包括计算accuracy,loss和其他自定义指标。</p><!-- toc --><!-- tocstop --><p>一.tensorflow的评估步骤</p><p>1.编译模型</p><p>在 训练 和 评估 开始之前,需要先 编译模型 以及 指定损失函数和优化器。</p><p>可以调用 compile 方法来完成。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#optimizer为优化器,loss为损失函数,metrcis为评估方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.评估模型</p><p>调用模型的evaluate方法,需要提供评估数据集作为输入，并且指定评估的batch_size。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token punctuation">,</span>accuracy<span class="token operator">=</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>evaluate方法会返回一个包含loss和accuracy的list,可以根据需要选择这些值。</p><p>3.自定义方法</p><p>我们可以自定义评估函数,实例代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">def</span> <span class="token function">custom_metric</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#自定义内容</span>    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span>custom_metric<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二.keras的评估指标</p><p>1.与tensorflow相同，第一步为编译模型</p><p>若以accuracy为评估指标，要在metrics中填入accuracy</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若以loss为评估指标,要在metrics中填入loss</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.自定义评估</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keras<span class="token punctuation">.</span>backend <span class="token keyword">as</span> K<span class="token keyword">def</span> <span class="token function">custom_metric</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 自定义评估指标的计算逻辑</span>    <span class="token comment"># 根据真实标签和预测标签计算指标值</span>    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span>custom_metric<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 评估模型的方法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sklearn中的模型评估</title>
      <link href="/2024/04/25/ping-gu-zhi-biao/"/>
      <url>/2024/04/25/ping-gu-zhi-biao/</url>
      
        <content type="html"><![CDATA[<p>“评估指标” 用来评价机器学习模型的性能<br>常见的有准确率(accuracy),精确率(precision),召回率(recall),f1分数(F1 Score)<br>指标的英文-“metrics”<br>sklearn库中的评估指标<br>1)accuracy_score-准确率<br>a. 模型预测<code>正确的样本</code>占<code>总样本数</code>的比例,用于评估<code>分类模型</code>的性能<br>b.使用函数 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>accuracy_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c.示例代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token comment"># 真实标签</span>y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 预测标签</span>y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 计算准确率</span>accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy:"</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2)precision_score-精确率,recall_score-召回率<br>a.precision和recall用来评估<code>二分类模型</code><br>precision 衡量模型预测中为<code>正类的样本</code>中<code>实际为正类的</code>比例<br>recall 衡量<code>实际为正类的样本</code>被<code>正确预测</code>的正类比例<br>b.使用函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>precision_scoresklearn<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>recall_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>c.示例代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_score<span class="token punctuation">,</span> recall_score<span class="token comment"># 真实标签</span>y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 预测标签</span>y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 计算精确率</span>precision <span class="token operator">=</span> precision_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Precision:"</span><span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token comment"># 计算召回率</span>recall <span class="token operator">=</span> recall_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Recall:"</span><span class="token punctuation">,</span> recall<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3)f1_score - F1分数<br>a.f1分数 综合考虑了precision和recall的评估指标,用于平衡二者之间的权衡关系<br>b.使用函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>f1_score<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>c.示例代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_score<span class="token comment"># 真实标签</span>y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 预测标签</span>y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 计算F1分数</span>f1 <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"F1 Score:"</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4)交叉验证<br>a.概述<br>用于<code>评估模型在未见过的数据</code>上的性能统计方法,可以<code>避免过拟合</code>,相对<code>客观的判断</code>模型的泛化能力。在交叉验证中，我们将数据集(训练集,不包含验证集)等量划分成几个小子集，然后对不同子集运行建模过程。<br>b.什么时候使用交叉验证?<br>·当<code>数据较少</code>时,可以用交叉验证<code>cross-validation</code><br>·当<code>数据较大</code>时,可以用<code>简单验证法</code>,即就是讲样本数据随机分为两部分(如80%训练集和20%验证集),若用交叉验证则会耗时过长。<br>·若模型需要几分钟或更少的时间运行，则可能值得使用交叉验证。<br>用随机森林模型举例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor<span class="token comment">#导入随机森林回归</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token comment">#导入交叉验证模组</span>data<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'filename.csv'</span><span class="token punctuation">)</span><span class="token comment">#读取数据</span>X<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'column_1'</span><span class="token punctuation">,</span><span class="token string">'column_2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'column_3'</span><span class="token punctuation">]</span><span class="token comment">#读取数据</span>model<span class="token operator">=</span>RandomForestRegressor<span class="token punctuation">(</span>m_estimator<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#对模型实例化</span>scores <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>socring<span class="token operator">=</span><span class="token string">'neg_mean_absolute_error'</span><span class="token punctuation">)</span><span class="token comment">#前面加上-1的系数,因为在sklearn的计算中MAE是负数</span><span class="token comment">#cv表示折叠的次数</span><span class="token comment">#model代表 实例化的模型</span><span class="token comment">#X,y代表数据集</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MAE scores:\n'</span><span class="token punctuation">,</span>scores<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MAE scores<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">301628.7893587</span>  <span class="token number">303164.4782723</span>  <span class="token number">287298.331666</span>   <span class="token number">236061.84754543</span>   <span class="token number">260383.45111427</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从分数矩阵中，可以观察到实验四的MAE值最小，即该子集模型的拟合效果最好。</p>]]></content>
      
      
      <categories>
          
          <category> 模型评估 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日志记录</title>
      <link href="/2024/04/25/ri-zhi-ji-lu/"/>
      <url>/2024/04/25/ri-zhi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>为了使模型训练可视化，python内置了logging库,比用print打印更省内存</p><p>一.先导入logging库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二.日志级别以及对应函数</p><p>1)日志优先级</p><p> CRIRICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG</p><p> 当将日志级别设为某个级别时，则低于该级别的日志将不会输出</p><p> 若日志级别为INFO，则DEBUG将不会输出</p><p>DEBUG : 开发阶段使用，用来定位问题或显示程序运行细节</p><p>INFO : 用来输出一般信息，确认其正常工作</p><p>WARNING ： 用来输出警告信息,但不影响程序正常运行</p><p>ERROR : 报错信息，程序的一些功能以及不可用</p><p>CRITICAL ： 严重错误信息，程序已经不可以执行</p><p>2)基本使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment">#logging.basicConfig 相当于一个组合器，可以不在单独设置。</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level <span class="token operator">=</span> logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span><span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span> <span class="token comment">#level中设置当前程序中日志的等级，低于该等级的不会输出,format中是输出的格式。</span><span class="token comment">#创建了一个日志记录器实例名字自拟。</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>_name_<span class="token punctuation">)</span><span class="token comment">#一下就是输出信息内容</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Start print log"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"Do something"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"Something maybe fail."</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Finish"</span><span class="token punctuation">)</span><span class="token comment">#输出后debug不会输出因为等级比info低</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.format的参数</p><p>%(levelno)s：打印日志级别的数值<br>%(levelname)s：打印日志级别的名称<br>%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]<br>%(filename)s：打印当前执行程序名<br>%(funcName)s：打印日志的当前函数<br>%(lineno)d：打印日志的当前行号<br>%(asctime)s：打印日志的时间<br>%(thread)d：打印线程ID<br>%(threadName)s：打印线程名称<br>%(process)d：打印进程ID<br>%(message)s：打印日志信息</p><p>四.保存日志文件</p><p>使用的是logging.FileHandler(路径)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment">#创建一个日志记录器</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>_name_<span class="token punctuation">)</span><span class="token comment">#设置日记级别</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span class="token comment">#创建一个FileHandler,并设置日志文件路径</span>log_file <span class="token operator">=</span> <span class="token string">'XXX.log'</span>handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>log_file<span class="token punctuation">)</span><span class="token comment">#创建一个格式化器</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">"%(asctime)s - %(name)s - %(levelname)s - %(message)s"</span><span class="token punctuation">)</span><span class="token comment">#将格式化器添加到处理器</span>handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token comment">#将处理器添加到日志记录器</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment">#输出日志消息</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"this is an info message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"this is a warning message"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>五.日志记录在迭代训练中的应用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment"># 配置日志记录器</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span class="token comment"># 模拟迭代训练过程</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在每个epoch开始时记录信息</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string"> started."</span></span><span class="token punctuation">)</span>    <span class="token comment"># 在每个迭代中记录迭代号和损失值</span>    <span class="token keyword">for</span> iteration <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">*</span> iteration  <span class="token comment"># 这里仅作示例，假设损失值为0.1 * 迭代号</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Iteration </span><span class="token interpolation"><span class="token punctuation">&#123;</span>iteration<span class="token punctuation">&#125;</span></span><span class="token string">: Loss = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 在每个epoch结束时记录信息</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string"> ended."</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 可视化记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分词(jieba库)</title>
      <link href="/2024/04/22/fen-ci-jieba-ku/"/>
      <url>/2024/04/22/fen-ci-jieba-ku/</url>
      
        <content type="html"><![CDATA[<p>jieba库是基于统计学的中文分词词库</p><p>1.第一步是先导入jieba库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>jieba的模式</li></ol><p>1)cut_all&#x3D;True 即全模式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">seg_list<span class="token operator">=</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span><span class="token string">"我来到北京清华大学"</span><span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Full Mode:"</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>seg_list保存的所有的可能分词结果</p><p>‘#’.join(seg_list),其中的#代表每个分词的 分隔符号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式(re库)</title>
      <link href="/2024/04/22/wen-ben-shu-ju-chu-li/"/>
      <url>/2024/04/22/wen-ben-shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<p>正则表达式</p><p>1)首先我们先导入re库，我们可以快速的使用正则匹配</p><pre class="line-numbers language-none"><code class="language-none">import re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2)re中常用的功能有<br>a.</p><pre class="line-numbers language-none"><code class="language-none">re.match()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该指令会从字符串首字符开始匹配，若是首字符匹配不到，则会返回错误。</p><p>b.</p><pre class="line-numbers language-none"><code class="language-none">re.search()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该指令可以从任意位置匹配对应,但只会返回一个匹配成功的字符串，没有匹配到的话则会返回None</p><p>c.</p><pre class="line-numbers language-none"><code class="language-none">re.findall()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9</p>]]></content>
      
      
      <categories>
          
          <category> 数据预处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文本数据读取</title>
      <link href="/2024/04/21/wen-ben-shu-ju-du-qu/"/>
      <url>/2024/04/21/wen-ben-shu-ju-du-qu/</url>
      
        <content type="html"><![CDATA[<p>属于数据预处理的范畴，而文本数据读取是自然语言的第一步</p><p>本章有四个知识点</p><p>1.txt文本数据的读写</p><p>2.CSV以及Excel文本数据的读写</p><p>3.更多的DataFrame的操作</p><p>4.对大规模数据的压缩</p><p>一.txt文本数据的读写</p><p>a. Python内置函数open()和write()可以实现对txt文本的读取或写入操作</p><p>   open(“文件路径”,”读写模式”,encoding&#x3D;”编码格式”)</p><p>文件路径:一般为绝对路径，因为数据就放在程序的文件夹中</p><p>读写模式: 通俗讲就是对文件进行如何的操作,以下是常用的模式</p><ol><li><p>r:读取文件，文件不存在会报错<br>rb:读取二进制文件,文件不存在会报错<br>r+:可读可写，文件不存在会报错，写入操作时会覆盖原文件。</p></li><li><p>w:写入文件,若文件不存在则会先创建再写入，存在则覆盖原文件<br>wb:写入二进制文件，若文件不存在则会先创建再写入，存在则覆盖原文件<br>w+:可读可写，文件不存在则先创建，若存在则会覆盖。</p></li><li><p>a:写入文件，若文件不存在则会先创建再写入，存在不会覆盖原文件，会在源文件后续写。<br>a+:可读可写，文件不存在会先创建，若不存在则不会覆盖，在文件中继续写入内容。</p></li></ol><p>编码格式: 一般用 utf-8 </p><p>注：utf-8（8 位元，Universal Character Set&#x2F;Unicode Transformation Format）是针对 Unicode 的一种可变长度字符编码。它可以用来表示 Unicode 标准中的任何字符，而且其编码中的第一个字节仍与 ASCII 相容，使得原来处理 ASCII 字符的软件无须或只进行少部份修改后，便可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。</p><p>b.read(),readlines(),readline()的区别</p><p>1)若</p><p>   f&#x3D;open(“file_path”,”w”,encoding&#x3D;”utf-8”)</p><p>则用<br>   a&#x3D;f.read()  #读取整个文件存放到一个str变量中，若文件过大则无法使用该方法<br>   b&#x3D;f.readline() #每次只读取文件的一行，将每一行读到的数据存放到一个str变量中，可在文件过大时使用<br>   c&#x3D;f.readlines()  #按行读取整个文件内容，并将内容存放到一个list中<br>调用函数。</p><p>2)type(a)是str   type(b)是str type(c)是list</p><p>3)readline()方法</p><p>   f &#x3D; open(“poem.txt”,”r”, encoding&#x3D;”utf-8”)<br>   while True:<br>      poem_line &#x3D; f.readline()<br>      if poem_line:<br>      print(type(poem_line), poem_line)  # 分次返回每一$行<br>   else:<br>      break</p><p>c. write()</p><p>   f.write(“内容”)<br>在open()函数中已经确定了写入内容的模式</p><p>二.CSV及Excel文本数据的读写</p><p>基于pandas对不同类型的文件数据进行操作</p><p>先导入库<br>   import pandas as pd</p><p>传入数据</p><p>   df&#x3D;pd.DataFrame(data)</p><p>一些对数据集的操作</p><p>   df&#x3D;df.T #将数据集进行转置</p><p>   df.to_csv(“数据集名称.csv”,encoding&#x3D;’utf-8’) #将df的内容保存在csv文件内</p><p>用read_csv()读取刚生成的文件</p><p>   df&#x3D;pd.read_csv(“刚保存文件的绝对路径”,index_col&#x3D;0) #index_col&#x3D;0 表示将第一列作为索引</p><p>读写的更多操作:</p><p>保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"name.xlsx"</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_pickle<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.更多DataFrame操作</p><p>1)loc[] 可以获得指定行和列 名称的数据<br>获取在”a”行”b”列的数据<br><code>df.loc[&quot;a&quot;,&quot;b&quot;]</code><br>直接根据列名获取,即获取”b”列的数据<br><code>df.loc[&quot;b&quot;]</code><br>获取多列数据，即获取”b”列和”c”列的数据<br><code>df.loc[[&quot;b&quot;,&quot;c&quot;]]</code></p><p>2)iloc[] 获取某一行<br>操作格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span>行<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>列<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一行所有列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得1到3行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取0到2行，1,2,3列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3)在loc中使用条件限定<br>根据条件获取数据，如获取亚洲国家对应的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"CONT"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Asia"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若需要满足多个条件，用 &amp; 连接即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"CONT"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Asia"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"GDP"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 注意 &amp; 左右两边的条件要加上（），否则报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4)直接应用 DataFrame 中的 plot() 函数可以对数值类型的列进行画图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以只选取其中的某部分感兴趣的数据进行画图。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"POP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据预处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
