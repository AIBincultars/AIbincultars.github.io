<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch搭建神经网络</title>
      <link href="/2024/04/29/pytorch%E6%90%AD%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/04/29/pytorch%E6%90%AD%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>评估指标(tensorflow和keras)</title>
      <link href="/2024/04/25/%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87-tensorflow/"/>
      <url>/2024/04/25/%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87-tensorflow/</url>
      
        <content type="html"><![CDATA[<p>Keras和tensorflow的评估指标很相似,评估功能都内置在函数库中。</p><p>评估功能呢包括计算accuracy,loss和其他自定义指标。</p><p>一.tensorflow的评估步骤</p><p>1.编译模型</p><p>在 训练 和 评估 开始之前,需要先 编译模型 以及 指定损失函数和优化器。</p><p>可以调用 compile 方法来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"><span class="comment">#optimizer为优化器,loss为损失函数,metrcis为评估方式</span></span><br></pre></td></tr></table></figure><p>2.评估模型</p><p>调用模型的evaluate方法,需要提供评估数据集作为输入，并且指定评估的batch_size。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss,accuracy=model.evaluate(test_dataset,batch_size=<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>evaluate方法会返回一个包含loss和accuracy的list,可以根据需要选择这些值。</p><p>3.自定义方法</p><p>我们可以自定义评估函数,实例代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_metric</span>(<span class="params">y_true,y_pred</span>):</span><br><span class="line">    <span class="comment">#自定义内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,metrics=[custom_metric])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二.keras的评估指标</p><p>1.与tensorflow相同，第一步为编译模型</p><p>若以accuracy为评估指标，要在metrics中填入accuracy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p>若以loss为评估指标,要在metrics中填入loss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;loss&#x27;</span>])</span><br></pre></td></tr></table></figure><p>2.自定义评估</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras.backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_metric</span>(<span class="params">y_true, y_pred</span>):</span><br><span class="line">    <span class="comment"># 自定义评估指标的计算逻辑</span></span><br><span class="line">    <span class="comment"># 根据真实标签和预测标签计算指标值</span></span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[custom_metric])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>评估指标(sklearn)</title>
      <link href="/2024/04/25/%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/"/>
      <url>/2024/04/25/%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>“评估指标” 用来评价机器学习模型的性能 </p><p>常见的有准确率(accuracy),精确率(precision),召回率(recall),f1分数(F1 Score)</p><p>指标的英文-“metrics”</p><p>sklearn库中的评估指标 </p><p>1)accuracy-准确率</p><p>a. 模型预测正确的样本 占 总样本数 的比例,用于评估 分类模型 的性能</p><p>b.使用函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sklearn.metrics.accuracy_score</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>c.示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真实标签</span></span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 预测标签</span></span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = accuracy_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy:&quot;</span>, accuracy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)precision-精确率,recall-召回率</p><p>a.precision和recall用来评估 二分类模型</p><p>precision 衡量模型预测中为 正类的样本中实际为正类的比例</p><p>recall 衡量 实际为正类的样本 被 正确预测 的正类比例</p><p>b.使用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sklearn.metrics.precision_score</span><br><span class="line"></span><br><span class="line">sklearn.metrics.recall_score</span><br><span class="line"></span><br><span class="line">c.示例代码</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score, recall_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真实标签</span></span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 预测标签</span></span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算精确率</span></span><br><span class="line">precision = precision_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Precision:&quot;</span>, precision)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算召回率</span></span><br><span class="line">recall = recall_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recall:&quot;</span>, recall)</span><br></pre></td></tr></table></figure><p>3)f1_score - F1分数</p><p>a.f1分数 综合考虑了precision和recall的评估指标,用于平衡二者之间的权衡关系</p><p>b.使用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.metrics.f1_score</span><br></pre></td></tr></table></figure><p>c.示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真实标签</span></span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 预测标签</span></span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算F1分数</span></span><br><span class="line">f1 = f1_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F1 Score:&quot;</span>, f1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日志记录</title>
      <link href="/2024/04/25/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/04/25/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>为了使模型训练可视化，python内置了logging库,比用print打印更省内存</p><p>一.先导入logging库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br></pre></td></tr></table></figure><p>二.日志级别以及对应函数</p><p>1)日志优先级</p><p> CRIRICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG</p><p> 当将日志级别设为某个级别时，则低于该级别的日志将不会输出</p><p> 若日志级别为INFO，则DEBUG将不会输出</p><p>DEBUG : 开发阶段使用，用来定位问题或显示程序运行细节</p><p>INFO : 用来输出一般信息，确认其正常工作</p><p>WARNING ： 用来输出警告信息,但不影响程序正常运行</p><p>ERROR : 报错信息，程序的一些功能以及不可用</p><p>CRITICAL ： 严重错误信息，程序已经不可以执行</p><p>2)基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment">#logging.basicConfig 相当于一个组合器，可以不在单独设置。</span></span><br><span class="line">logging.basicConfig(level = logging.INFO,<span class="built_in">format</span> = <span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>) </span><br><span class="line"><span class="comment">#level中设置当前程序中日志的等级，低于该等级的不会输出,format中是输出的格式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建了一个日志记录器实例名字自拟。</span></span><br><span class="line">logger = logging.getLogger(_name_)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一下就是输出信息内容</span></span><br><span class="line">logger.info(<span class="string">&quot;Start print log&quot;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;Do something&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;Something maybe fail.&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出后debug不会输出因为等级比info低</span></span><br></pre></td></tr></table></figure><p>三.format的参数</p><p>%(levelno)s：打印日志级别的数值<br>%(levelname)s：打印日志级别的名称<br>%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]<br>%(filename)s：打印当前执行程序名<br>%(funcName)s：打印日志的当前函数<br>%(lineno)d：打印日志的当前行号<br>%(asctime)s：打印日志的时间<br>%(thread)d：打印线程ID<br>%(threadName)s：打印线程名称<br>%(process)d：打印进程ID<br>%(message)s：打印日志信息</p><p>四.保存日志文件</p><p>使用的是logging.FileHandler(路径)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个日志记录器</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(_name_)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日记级别</span></span><br><span class="line"></span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个FileHandler,并设置日志文件路径</span></span><br><span class="line"></span><br><span class="line">log_file = <span class="string">&#x27;XXX.log&#x27;</span></span><br><span class="line"></span><br><span class="line">handler = logging.FileHandler(log_file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个格式化器</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将格式化器添加到处理器</span></span><br><span class="line"></span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将处理器添加到日志记录器</span></span><br><span class="line"></span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出日志消息</span></span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;this is an info message&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.warning(<span class="string">&quot;this is a warning message&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>五.日志记录在迭代训练中的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录器</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟迭代训练过程</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="comment"># 在每个epoch开始时记录信息</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Epoch <span class="subst">&#123;epoch&#125;</span> started.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在每个迭代中记录迭代号和损失值</span></span><br><span class="line">    <span class="keyword">for</span> iteration <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        loss = <span class="number">0.1</span> * iteration  <span class="comment"># 这里仅作示例，假设损失值为0.1 * 迭代号</span></span><br><span class="line">        logging.info(<span class="string">f&quot;Iteration <span class="subst">&#123;iteration&#125;</span>: Loss = <span class="subst">&#123;loss:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在每个epoch结束时记录信息</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Epoch <span class="subst">&#123;epoch&#125;</span> ended.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分词(jieba库)</title>
      <link href="/2024/04/22/%E5%88%86%E8%AF%8D-jieba%E5%BA%93/"/>
      <url>/2024/04/22/%E5%88%86%E8%AF%8D-jieba%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>jieba库是基于统计学的中文分词词库</p><p>1.第一步是先导入jieba库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure><ol start="2"><li>jieba的模式</li></ol><p>1)cut_all&#x3D;True 即全模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seg_list=jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>,cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode:&quot;</span>+<span class="string">&#x27;/&#x27;</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>seg_list保存的所有的可能分词结果</p><p>‘#’.join(seg_list),其中的#代表每个分词的 分隔符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式(re库)</title>
      <link href="/2024/04/22/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2024/04/22/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>正则表达式</p><p>1)首先我们先导入re库，我们可以快速的使用正则匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><p>2)re中常用的功能有<br>a.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.<span class="keyword">match</span>()</span><br></pre></td></tr></table></figure><p>该指令会从字符串首字符开始匹配，若是首字符匹配不到，则会返回错误。</p><p>b.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.search()</span><br></pre></td></tr></table></figure><p>该指令可以从任意位置匹配对应,但只会返回一个匹配成功的字符串，没有匹配到的话则会返回None</p><p>c.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall()</span><br></pre></td></tr></table></figure><p>9</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对自己的话</title>
      <link href="/2024/04/21/hello-world/"/>
      <url>/2024/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>略无慕艳意，以中有足乐者，不知口体之奉不若人也</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文本数据读取</title>
      <link href="/2024/04/21/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/"/>
      <url>/2024/04/21/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>属于数据预处理的范畴，而文本数据读取是自然语言的第一步</p><p>本章有四个知识点</p><p>1.txt文本数据的读写</p><p>2.CSV以及Excel文本数据的读写</p><p>3.更多的DataFrame的操作</p><p>4.对大规模数据的压缩</p><p>一.txt文本数据的读写</p><p>a. Python内置函数open()和write()可以实现对txt文本的读取或写入操作</p><p>   open(“文件路径”,”读写模式”,encoding&#x3D;”编码格式”)</p><p>文件路径:一般为绝对路径，因为数据就放在程序的文件夹中</p><p>读写模式: 通俗讲就是对文件进行如何的操作,以下是常用的模式</p><ol><li><p>r:读取文件，文件不存在会报错<br>rb:读取二进制文件,文件不存在会报错<br>r+:可读可写，文件不存在会报错，写入操作时会覆盖原文件。</p></li><li><p>w:写入文件,若文件不存在则会先创建再写入，存在则覆盖原文件<br>wb:写入二进制文件，若文件不存在则会先创建再写入，存在则覆盖原文件<br>w+:可读可写，文件不存在则先创建，若存在则会覆盖。</p></li><li><p>a:写入文件，若文件不存在则会先创建再写入，存在不会覆盖原文件，会在源文件后续写。<br>a+:可读可写，文件不存在会先创建，若不存在则不会覆盖，在文件中继续写入内容。</p></li></ol><p>编码格式: 一般用 utf-8 </p><p>注：utf-8（8 位元，Universal Character Set&#x2F;Unicode Transformation Format）是针对 Unicode 的一种可变长度字符编码。它可以用来表示 Unicode 标准中的任何字符，而且其编码中的第一个字节仍与 ASCII 相容，使得原来处理 ASCII 字符的软件无须或只进行少部份修改后，便可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。</p><p>b.read(),readlines(),readline()的区别</p><p>1)若</p><p>   f&#x3D;open(“file_path”,”w”,encoding&#x3D;”utf-8”)</p><p>则用<br>   a&#x3D;f.read()  #读取整个文件存放到一个str变量中，若文件过大则无法使用该方法<br>   b&#x3D;f.readline() #每次只读取文件的一行，将每一行读到的数据存放到一个str变量中，可在文件过大时使用<br>   c&#x3D;f.readlines()  #按行读取整个文件内容，并将内容存放到一个list中<br>调用函数。</p><p>2)type(a)是str   type(b)是str type(c)是list</p><p>3)readline()方法</p><p>   f &#x3D; open(“poem.txt”,”r”, encoding&#x3D;”utf-8”)<br>   while True:<br>      poem_line &#x3D; f.readline()<br>      if poem_line:<br>      print(type(poem_line), poem_line)  # 分次返回每一$行<br>   else:<br>      break</p><p>c. write()</p><p>   f.write(“内容”)<br>在open()函数中已经确定了写入内容的模式</p><p>二.CSV及Excel文本数据的读写</p><p>基于pandas对不同类型的文件数据进行操作</p><p>先导入库<br>   import pandas as pd</p><p>传入数据</p><p>   df&#x3D;pd.DataFrame(data)</p><p>一些对数据集的操作</p><p>   df&#x3D;df.T #将数据集进行转置</p><p>   df.to_csv(“数据集名称.csv”,encoding&#x3D;’utf-8’) #将df的内容保存在csv文件内</p><p>用read_csv()读取刚生成的文件</p><p>   df&#x3D;pd.read_csv(“刚保存文件的绝对路径”,index_col&#x3D;0) #index_col&#x3D;0 表示将第一列作为索引</p><p>读写的更多操作:</p><p>保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.to_excel(<span class="string">&quot;name.xlsx&quot;</span>)</span><br><span class="line">pd.to_json()</span><br><span class="line">pd.to_sql()</span><br><span class="line">pd.to_pickle()</span><br></pre></td></tr></table></figure><p>读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel()</span><br><span class="line">pd.read_json()</span><br><span class="line">pd.read_html()</span><br><span class="line">pd.read_sql()</span><br><span class="line">pd.read_pickle()</span><br></pre></td></tr></table></figure><p>三.更多DataFrame操作</p><p>1)loc[] 可以获得指定行和列 名称的数据<br>获取在”a”行”b”列的数据<br><code>df.loc[&quot;a&quot;,&quot;b&quot;]</code><br>直接根据列名获取,即获取”b”列的数据<br><code>df.loc[&quot;b&quot;]</code><br>获取多列数据，即获取”b”列和”c”列的数据<br><code>df.loc[[&quot;b&quot;,&quot;c&quot;]]</code></p><p>2)iloc[] 获取某一行<br>操作格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[行],[列]]</span><br></pre></td></tr></table></figure><p>第一行所有列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">1</span>],]</span><br></pre></td></tr></table></figure><p>获得1到3行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">1</span>,<span class="number">4</span>],]</span><br></pre></td></tr></table></figure><p>获取0到2行，1,2,3列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p>3)在loc中使用条件限定<br>根据条件获取数据，如获取亚洲国家对应的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">&quot;CONT&quot;</span>] == <span class="string">&quot;Asia&quot;</span>]</span><br></pre></td></tr></table></figure><p>若需要满足多个条件，用 &amp; 连接即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[(df[<span class="string">&quot;CONT&quot;</span>] == <span class="string">&quot;Asia&quot;</span>) &amp; (df[<span class="string">&quot;GDP&quot;</span>] &gt; <span class="number">1000</span>)]  <span class="comment"># 注意 &amp; 左右两边的条件要加上（），否则报错</span></span><br></pre></td></tr></table></figure><p>4)直接应用 DataFrame 中的 plot() 函数可以对数值类型的列进行画图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot.bar()</span><br></pre></td></tr></table></figure><p>也可以只选取其中的某部分感兴趣的数据进行画图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;POP&quot;</span>].plot.bar()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致自己</title>
      <link href="/2024/04/21/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
      <url>/2024/04/21/%E8%87%B4%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>以中有足乐者,不知口体之奉不若人也 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
